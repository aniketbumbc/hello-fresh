{"ast":null,"code":"const currency = '$';\n\n/**\n * Method called getUniqueRecipes and calculateSelectedRecipesTotal method\n * based on output return boxTotal including shippipng price which is display on UI\n * @param {*} baseRecipePrice\n * @param {*} shippingPrice\n * @param {*} selectedRecipesInBox\n * @return {* boxTotal }\n */\nexport const calculateRecipeBoxTotal = (baseRecipePrice, shippingPrice, selectedRecipesInBox) => {\n  let uniqueRecipes = [];\n  if (selectedRecipesInBox && selectedRecipesInBox.length) {\n    uniqueRecipes = getUniqueRecipes(selectedRecipesInBox);\n  }\n  const calculateRecipesTotal = calculateSelectedRecipesTotal(uniqueRecipes, baseRecipePrice);\n  const boxTotal = calculateRecipesTotal + convertCentsToDollar(shippingPrice);\n  return `${currency}${boxTotal.toFixed(2)}`;\n};\n\n/**\n *  Method return total $ of unique (same type recipes) in the box without shippingPrice.\n * @param {*} uniqueRecipes\n * @param {*} baseRecipePrice\n * @return {* calculateRecipesTotal}\n */\n\nexport const calculateSelectedRecipesTotal = (uniqueRecipes, baseRecipePrice) => {\n  let calculateRecipesTotal = 0;\n  uniqueRecipes && uniqueRecipes.forEach(recipe => {\n    calculateRecipesTotal += convertCentsToDollar(baseRecipePrice) * recipe.selected;\n    calculateRecipesTotal += recipe.extraCharge ? convertCentsToDollar(recipe.extraCharge) * recipe.selected : 0;\n  });\n  return calculateRecipesTotal;\n};\n\n/**\n * Method removed duplicate recipes from box\n * @param {*} selectedRecipesInBox\n * @return {* tempUniqueRecipes}\n */\n\nexport const getUniqueRecipes = selectedRecipesInBox => {\n  let tempUniqueRecipes = [];\n  tempUniqueRecipes = [...selectedRecipesInBox];\n  const uniqueRecipesInBox = Object.values(tempUniqueRecipes.reduce((acc, cur) => Object.assign(acc, {\n    [cur.id]: cur\n  }), {}));\n  return uniqueRecipesInBox;\n};\n\n/**\n * Method return correct price with @$ contain at start of price\n * @param {*} price\n * @return{* $17.98}\n */\n\nexport const parseRawPrice = price => {\n  return `${currency}${convertCentsToDollar(price)}`;\n};\n\n/**\n * Method convert cents into dollars upto 2 decimals.\n * @param {*} price\n */\nexport const convertCentsToDollar = price => {\n  return Number(price, 10) / 100;\n};\n\n/**\n *  Method calculate recipes price when extraCharge is present.\n *  (baseRecipeCharge + extraCharge) * selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n * @param {*} extraCharge\n */\n\nexport const calculateExtraPrice = (baseRecipePrice, recipeSelected, extraCharge) => {\n  const totalPriceIncudeExtraCharge = convertCentsToDollar(baseRecipePrice) * recipeSelected + convertCentsToDollar(extraCharge) * recipeSelected;\n  return `$${totalPriceIncudeExtraCharge.toFixed(2)}`;\n};\n\n/**\n *  Method calculate recipe price based baseRecipePrice and selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n */\n\nexport const calculateBasePrice = (baseRecipePrice, recipeSelected) => {\n  const totalBasePrice = convertCentsToDollar(baseRecipePrice) * recipeSelected;\n  return `$${totalBasePrice.toFixed(2)}`;\n};","map":{"version":3,"names":["currency","calculateRecipeBoxTotal","baseRecipePrice","shippingPrice","selectedRecipesInBox","uniqueRecipes","length","getUniqueRecipes","calculateRecipesTotal","calculateSelectedRecipesTotal","boxTotal","convertCentsToDollar","toFixed","forEach","recipe","selected","extraCharge","tempUniqueRecipes","uniqueRecipesInBox","Object","values","reduce","acc","cur","assign","id","parseRawPrice","price","Number","calculateExtraPrice","recipeSelected","totalPriceIncudeExtraCharge","calculateBasePrice","totalBasePrice"],"sources":["/Users/aniketbhavsar/Desktop/Code Challenage/Hello Fresh/aniketbumbc-recipe-selection-react-test/hello-fresh/src/modules/recipes/price.js"],"sourcesContent":["const currency = '$';\n\n/**\n * Method called getUniqueRecipes and calculateSelectedRecipesTotal method\n * based on output return boxTotal including shippipng price which is display on UI\n * @param {*} baseRecipePrice\n * @param {*} shippingPrice\n * @param {*} selectedRecipesInBox\n * @return {* boxTotal }\n */\nexport const calculateRecipeBoxTotal = (baseRecipePrice, shippingPrice, selectedRecipesInBox) => {\n  let uniqueRecipes = [];\n  if (selectedRecipesInBox && selectedRecipesInBox.length) {\n    uniqueRecipes = getUniqueRecipes(selectedRecipesInBox);\n  }\n  const calculateRecipesTotal = calculateSelectedRecipesTotal(uniqueRecipes, baseRecipePrice);\n  const boxTotal = calculateRecipesTotal + convertCentsToDollar(shippingPrice);\n  return `${currency}${boxTotal.toFixed(2)}`;\n};\n\n/**\n *  Method return total $ of unique (same type recipes) in the box without shippingPrice.\n * @param {*} uniqueRecipes\n * @param {*} baseRecipePrice\n * @return {* calculateRecipesTotal}\n */\n\nexport const calculateSelectedRecipesTotal = (uniqueRecipes, baseRecipePrice) => {\n  let calculateRecipesTotal = 0;\n  uniqueRecipes &&\n    uniqueRecipes.forEach((recipe) => {\n      calculateRecipesTotal += convertCentsToDollar(baseRecipePrice) * recipe.selected;\n      calculateRecipesTotal += recipe.extraCharge\n        ? convertCentsToDollar(recipe.extraCharge) * recipe.selected\n        : 0;\n    });\n  return calculateRecipesTotal;\n};\n\n/**\n * Method removed duplicate recipes from box\n * @param {*} selectedRecipesInBox\n * @return {* tempUniqueRecipes}\n */\n\nexport const getUniqueRecipes = (selectedRecipesInBox) => {\n  let tempUniqueRecipes = [];\n  tempUniqueRecipes = [...selectedRecipesInBox];\n  const uniqueRecipesInBox = Object.values(\n    tempUniqueRecipes.reduce((acc, cur) => Object.assign(acc, { [cur.id]: cur }), {})\n  );\n  return uniqueRecipesInBox;\n};\n\n/**\n * Method return correct price with @$ contain at start of price\n * @param {*} price\n * @return{* $17.98}\n */\n\nexport const parseRawPrice = (price) => {\n  return `${currency}${convertCentsToDollar(price)}`;\n};\n\n/**\n * Method convert cents into dollars upto 2 decimals.\n * @param {*} price\n */\nexport const convertCentsToDollar = (price) => {\n  return Number(price, 10) / 100;\n};\n\n/**\n *  Method calculate recipes price when extraCharge is present.\n *  (baseRecipeCharge + extraCharge) * selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n * @param {*} extraCharge\n */\n\nexport const calculateExtraPrice = (baseRecipePrice, recipeSelected, extraCharge) => {\n  const totalPriceIncudeExtraCharge =\n    convertCentsToDollar(baseRecipePrice) * recipeSelected +\n    convertCentsToDollar(extraCharge) * recipeSelected;\n  return `$${totalPriceIncudeExtraCharge.toFixed(2)}`;\n};\n\n/**\n *  Method calculate recipe price based baseRecipePrice and selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n */\n\nexport const calculateBasePrice = (baseRecipePrice, recipeSelected) => {\n  const totalBasePrice = convertCentsToDollar(baseRecipePrice) * recipeSelected;\n  return `$${totalBasePrice.toFixed(2)}`;\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,eAAe,EAAEC,aAAa,EAAEC,oBAAoB,KAAK;EAC/F,IAAIC,aAAa,GAAG,EAAE;EACtB,IAAID,oBAAoB,IAAIA,oBAAoB,CAACE,MAAM,EAAE;IACvDD,aAAa,GAAGE,gBAAgB,CAACH,oBAAoB,CAAC;EACxD;EACA,MAAMI,qBAAqB,GAAGC,6BAA6B,CAACJ,aAAa,EAAEH,eAAe,CAAC;EAC3F,MAAMQ,QAAQ,GAAGF,qBAAqB,GAAGG,oBAAoB,CAACR,aAAa,CAAC;EAC5E,OAAQ,GAAEH,QAAS,GAAEU,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAE,EAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMH,6BAA6B,GAAGA,CAACJ,aAAa,EAAEH,eAAe,KAAK;EAC/E,IAAIM,qBAAqB,GAAG,CAAC;EAC7BH,aAAa,IACXA,aAAa,CAACQ,OAAO,CAAEC,MAAM,IAAK;IAChCN,qBAAqB,IAAIG,oBAAoB,CAACT,eAAe,CAAC,GAAGY,MAAM,CAACC,QAAQ;IAChFP,qBAAqB,IAAIM,MAAM,CAACE,WAAW,GACvCL,oBAAoB,CAACG,MAAM,CAACE,WAAW,CAAC,GAAGF,MAAM,CAACC,QAAQ,GAC1D,CAAC;EACP,CAAC,CAAC;EACJ,OAAOP,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMD,gBAAgB,GAAIH,oBAAoB,IAAK;EACxD,IAAIa,iBAAiB,GAAG,EAAE;EAC1BA,iBAAiB,GAAG,CAAC,GAAGb,oBAAoB,CAAC;EAC7C,MAAMc,kBAAkB,GAAGC,MAAM,CAACC,MAAM,CACtCH,iBAAiB,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKJ,MAAM,CAACK,MAAM,CAACF,GAAG,EAAE;IAAE,CAACC,GAAG,CAACE,EAAE,GAAGF;EAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAClF;EACD,OAAOL,kBAAkB;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMQ,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAQ,GAAE3B,QAAS,GAAEW,oBAAoB,CAACgB,KAAK,CAAE,EAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMhB,oBAAoB,GAAIgB,KAAK,IAAK;EAC7C,OAAOC,MAAM,CAACD,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,mBAAmB,GAAGA,CAAC3B,eAAe,EAAE4B,cAAc,EAAEd,WAAW,KAAK;EACnF,MAAMe,2BAA2B,GAC/BpB,oBAAoB,CAACT,eAAe,CAAC,GAAG4B,cAAc,GACtDnB,oBAAoB,CAACK,WAAW,CAAC,GAAGc,cAAc;EACpD,OAAQ,IAAGC,2BAA2B,CAACnB,OAAO,CAAC,CAAC,CAAE,EAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMoB,kBAAkB,GAAGA,CAAC9B,eAAe,EAAE4B,cAAc,KAAK;EACrE,MAAMG,cAAc,GAAGtB,oBAAoB,CAACT,eAAe,CAAC,GAAG4B,cAAc;EAC7E,OAAQ,IAAGG,cAAc,CAACrB,OAAO,CAAC,CAAC,CAAE,EAAC;AACxC,CAAC"},"metadata":{},"sourceType":"module"}