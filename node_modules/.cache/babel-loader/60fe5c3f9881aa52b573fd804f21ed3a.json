{"ast":null,"code":"import _defineProperty from\"/Users/aniketbhavsar/Desktop/Code Challenage/Hello Fresh/aniketbumbc-recipe-selection-react-test/hello-fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/aniketbhavsar/Desktop/Code Challenage/Hello Fresh/aniketbumbc-recipe-selection-react-test/hello-fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var currency='$';/**\n * Method called getUniqueRecipes and calculateSelectedRecipesTotal method\n * based on output return boxTotal including shippipng price which is display on UI\n * @param {*} baseRecipePrice\n * @param {*} shippingPrice\n * @param {*} selectedRecipesInBox\n * @return {* boxTotal }\n */export var calculateRecipeBoxTotal=function calculateRecipeBoxTotal(baseRecipePrice,shippingPrice,selectedRecipesInBox){var uniqueRecipes=[];if(selectedRecipesInBox&&selectedRecipesInBox.length){uniqueRecipes=getUniqueRecipes(selectedRecipesInBox);}var calculateRecipesTotal=calculateSelectedRecipesTotal(uniqueRecipes,baseRecipePrice);var boxTotal=calculateRecipesTotal+convertCentsToDollar(shippingPrice);return\"\".concat(currency).concat(boxTotal.toFixed(2));};/**\n *  Method return total $ of unique (same type recipes) in the box without shippingPrice.\n * @param {*} uniqueRecipes\n * @param {*} baseRecipePrice\n * @return {* calculateRecipesTotal}\n */export var calculateSelectedRecipesTotal=function calculateSelectedRecipesTotal(uniqueRecipes,baseRecipePrice){var calculateRecipesTotal=0;uniqueRecipes&&uniqueRecipes.forEach(function(recipe){calculateRecipesTotal+=convertCentsToDollar(baseRecipePrice)*recipe.selected;calculateRecipesTotal+=recipe.extraCharge?convertCentsToDollar(recipe.extraCharge)*recipe.selected:0;});return calculateRecipesTotal;};/**\n * Method removed duplicate recipes from box\n * @param {*} selectedRecipesInBox\n * @return {* tempUniqueRecipes}\n */export var getUniqueRecipes=function getUniqueRecipes(selectedRecipesInBox){var tempUniqueRecipes=[];tempUniqueRecipes=_toConsumableArray(selectedRecipesInBox);var uniqueRecipesInBox=Object.values(tempUniqueRecipes.reduce(function(acc,cur){return Object.assign(acc,_defineProperty({},cur.id,cur));},{}));return uniqueRecipesInBox;};/**\n * Method return correct price with @$ contain at start of price\n * @param {*} price\n * @return{* $17.98}\n */export var parseRawPrice=function parseRawPrice(price){return\"\".concat(currency).concat(convertCentsToDollar(price));};/**\n * Method convert cents into dollars upto 2 decimals.\n * @param {*} price\n */export var convertCentsToDollar=function convertCentsToDollar(price){return Number(price,10)/100;};/**\n *  Method calculate recipes price when extraCharge is present.\n *  (baseRecipeCharge + extraCharge) * selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n * @param {*} extraCharge\n */export var calculateExtraPrice=function calculateExtraPrice(baseRecipePrice,recipeSelected,extraCharge){var totalPriceIncudeExtraCharge=convertCentsToDollar(baseRecipePrice)*recipeSelected+convertCentsToDollar(extraCharge)*recipeSelected;return\"$\".concat(totalPriceIncudeExtraCharge.toFixed(2));};/**\n *  Method calculate recipe price based baseRecipePrice and selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n */export var calculateBasePrice=function calculateBasePrice(baseRecipePrice,recipeSelected){var totalBasePrice=convertCentsToDollar(baseRecipePrice)*recipeSelected;return\"$\".concat(totalBasePrice.toFixed(2));};","map":{"version":3,"names":["currency","calculateRecipeBoxTotal","baseRecipePrice","shippingPrice","selectedRecipesInBox","uniqueRecipes","length","getUniqueRecipes","calculateRecipesTotal","calculateSelectedRecipesTotal","boxTotal","convertCentsToDollar","concat","toFixed","forEach","recipe","selected","extraCharge","tempUniqueRecipes","_toConsumableArray","uniqueRecipesInBox","Object","values","reduce","acc","cur","assign","_defineProperty","id","parseRawPrice","price","Number","calculateExtraPrice","recipeSelected","totalPriceIncudeExtraCharge","calculateBasePrice","totalBasePrice"],"sources":["/Users/aniketbhavsar/Desktop/Code Challenage/Hello Fresh/aniketbumbc-recipe-selection-react-test/hello-fresh/src/modules/recipes/price.js"],"sourcesContent":["const currency = '$';\n\n/**\n * Method called getUniqueRecipes and calculateSelectedRecipesTotal method\n * based on output return boxTotal including shippipng price which is display on UI\n * @param {*} baseRecipePrice\n * @param {*} shippingPrice\n * @param {*} selectedRecipesInBox\n * @return {* boxTotal }\n */\nexport const calculateRecipeBoxTotal = (baseRecipePrice, shippingPrice, selectedRecipesInBox) => {\n  let uniqueRecipes = [];\n  if (selectedRecipesInBox && selectedRecipesInBox.length) {\n    uniqueRecipes = getUniqueRecipes(selectedRecipesInBox);\n  }\n  const calculateRecipesTotal = calculateSelectedRecipesTotal(uniqueRecipes, baseRecipePrice);\n  const boxTotal = calculateRecipesTotal + convertCentsToDollar(shippingPrice);\n  return `${currency}${boxTotal.toFixed(2)}`;\n};\n\n/**\n *  Method return total $ of unique (same type recipes) in the box without shippingPrice.\n * @param {*} uniqueRecipes\n * @param {*} baseRecipePrice\n * @return {* calculateRecipesTotal}\n */\n\nexport const calculateSelectedRecipesTotal = (uniqueRecipes, baseRecipePrice) => {\n  let calculateRecipesTotal = 0;\n  uniqueRecipes &&\n    uniqueRecipes.forEach((recipe) => {\n      calculateRecipesTotal += convertCentsToDollar(baseRecipePrice) * recipe.selected;\n      calculateRecipesTotal += recipe.extraCharge\n        ? convertCentsToDollar(recipe.extraCharge) * recipe.selected\n        : 0;\n    });\n  return calculateRecipesTotal;\n};\n\n/**\n * Method removed duplicate recipes from box\n * @param {*} selectedRecipesInBox\n * @return {* tempUniqueRecipes}\n */\n\nexport const getUniqueRecipes = (selectedRecipesInBox) => {\n  let tempUniqueRecipes = [];\n  tempUniqueRecipes = [...selectedRecipesInBox];\n  const uniqueRecipesInBox = Object.values(\n    tempUniqueRecipes.reduce((acc, cur) => Object.assign(acc, { [cur.id]: cur }), {})\n  );\n  return uniqueRecipesInBox;\n};\n\n/**\n * Method return correct price with @$ contain at start of price\n * @param {*} price\n * @return{* $17.98}\n */\n\nexport const parseRawPrice = (price) => {\n  return `${currency}${convertCentsToDollar(price)}`;\n};\n\n/**\n * Method convert cents into dollars upto 2 decimals.\n * @param {*} price\n */\nexport const convertCentsToDollar = (price) => {\n  return Number(price, 10) / 100;\n};\n\n/**\n *  Method calculate recipes price when extraCharge is present.\n *  (baseRecipeCharge + extraCharge) * selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n * @param {*} extraCharge\n */\n\nexport const calculateExtraPrice = (baseRecipePrice, recipeSelected, extraCharge) => {\n  const totalPriceIncudeExtraCharge =\n    convertCentsToDollar(baseRecipePrice) * recipeSelected +\n    convertCentsToDollar(extraCharge) * recipeSelected;\n  return `$${totalPriceIncudeExtraCharge.toFixed(2)}`;\n};\n\n/**\n *  Method calculate recipe price based baseRecipePrice and selected\n * @param {*} baseRecipePrice\n * @param {*} recipeSelected\n */\n\nexport const calculateBasePrice = (baseRecipePrice, recipeSelected) => {\n  const totalBasePrice = convertCentsToDollar(baseRecipePrice) * recipeSelected;\n  return `$${totalBasePrice.toFixed(2)}`;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}